*************** Partie 1 : Creation d'un environnement de developpement (bonne pratique)******************
				-------------------------------------------------------------------------------

     - Créer un repertoire deveoppement dans le lecteur C.
	 
	 - Dans le repertoire developpement, créer les sous repertoires sdk(source developement kit), 
	 
		ide(environement de deveoppement intégré), server et outil
		
	 - Dans le repertoire sdk, créer un sous répertoire java. Ce repertoire consituera le repertoire d'installation
	 
		du jdk.

******* Partie 2: Téléchagrment et Installation, Configuration et Test d'installation ***************
        ----------------------------------------------------------------------------------------------

Pour installer le kit JDK, il faut d’abord le télécharger.

		•Pour le téléchargement : Rendez-vous sur la partie Java du site d’Oracle :

		http://www.oracle.com/technetwork/java
		
		
		•Pour l’installation : Rendez-vous sur le site d’Objis : http://www.objis.com/formation-java/tutoriel-java-installation-jdk.html
	
		CONFIGURATION Recommandée pour le PATH (pas obligatoire pour le moment) :
		**************************************************************************
		
1) créer une variable d'environnement JAVA_HOME qui pointe sur le répertoire d'installation du JDK 

	(ex : JAVA_HOME = C:\Program Files (x86)\Java\jdk1.8.0_20). 

	Cette variable sera nécessaire pour certains programme (ex: serveur d'application Java EE 'TOMCAT')

	qui auront besoin de connaître le répertoire d'installation du JDK
	
	
2) Modifier la variable d'environnement PATH en remplaçant le chemin en dur 

	(ex : C:\Program Files (x86)\Java\jdk1.8.0_20\bin) par un chemin relatif à JAVA_HOME 
	
	(ex : %JAVA_HOME%\bin sous windows et $JAVA_HOME\bin sous linux / Mac).

	Cela permet de ne plus toucher) à la variable PATH même si on change de JDK
	

*************Partie 3 : Analyse des repertoires du JDK*********************
			-------------------------------------------------------------------------------
			
Analyse les repertoires du JDK et leurs contenus.


*************Partie 4 : Test de compilation et d'execution d'un programme Java*************
			----------------------------------------------------------------------
Contexte :
		
	Vous souhaitez vous auto former sur la création d'IHM (en anglais GUI pour Graphical User Interface).

	Vous avez constaté que la plateforme fournit le 'tiroir' SWING.

	Vous entrez dans ce tiroir et constatez qu'il y a des tutoriels qu’Oracle met (en anglais !) 
	
	à votre disposition.

	Télécharger le code HelloWorldSwing.java issue du premier tutoriel officiel Oracle sur la 
	
	création d'interface Homme Machine avec SWING.
	
	
Compiler et executer le code de trois façons différentes : 

  ---TECHNIQUE 1-------
			
			1)	Compilateur de java
			
				Un compilateur Java, par exemple l’outil javac (Java Compiler) fourni avec le 
				
				JDK est utilisé pour compiler chaque fichier en fichier de classe possédant l’extension .class.
				
				Cette compilation génère pour chaque fichier source un ou plusieurs fichiers .class 
				
				qui contiennent du byte-code.
				
				• créer un répertoire start, mettre le fichier puis remonter et lancer 
				
				  cette commande suivante :  Javac start/HelloWorldSwing.java
				  
			2)	L’exécution du programme
			
				Un exécuteur Java, par exemple l’outil java fourni avec le JDK est utilisé pour

				exécuter un programme Java
				
				> java start.HelloWorldSwing --> lance fenêtre en haut à droite de l'écran

---------------TECHNIQUE 2----------------

			1) javac HelloWorldSwing.java ?si vous commentez la ligne 'package start;'
			
			2) java HelloWorldSwing ? lance fenêtre en haut à droite de l'écran



-----------TECHNIQUE 3 -------------

		1) javac –d . HelloWorldSwing.java  (pas besoin de créer manuellement un répertoire 'start'

		  même si la première ligne du code est 'package start',
		  
		  le compilateur va créer ce répertoire et mettre le bytecode (.class) dedans.
		  
		  Ici : l'option -d permet de préciser le répertoire de base des fichiers .class générés par la compilation.
		
		
		 2) java start.HelloWorldSwing ?lance fenêtre en haut à droite de l'écran
		

QUESTION : pourquoi y a-t-il deux fichiers .class généré ?

**********Partie 5 : Faire evoluer le code****************

	Evoluer le code afin de modifier par programmation la taille de la fenêtre

	Astuce : Utilisation du Javadoc pour trouver la documentation de la classe JFrame: 


